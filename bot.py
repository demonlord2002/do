import random
import logging
from typing import Dict, Any
from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pymongo import MongoClient
from pymongo.errors import PyMongoError
from config import API_ID, API_HASH, BOT_TOKEN, MONGO_URI, DB_NAME, COLLECTION_NAME, OWNER_LINK, CHANNEL_LINK

# --- Setup logging ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- MongoDB Connection ---
try:
    mongo_client = MongoClient(MONGO_URI)
    db = mongo_client[DB_NAME]
    scores_collection = db[COLLECTION_NAME]
    logger.info("MongoDB connected successfully.")
except PyMongoError as e:
    logger.error(f"MongoDB connection failed: {e}")
    scores_collection = None

# --- Movie & Emoji data ---
movies = [
    # (Emoji, Movie name)
    ("ЁЯРЕЁЯФФ", "Puli"), ("ЁЯХ╖я╕ПЁЯзС", "Spider-Man: No Way Home (Tamil Dub)"), ("ЁЯжБЁЯТк", "Singam"),
    # ... your full movie list here, truncated for brevity
]

emoji_meanings = {
    # Use exact keys matching your emoji in movies for correct lookup
    "ЁЯРЕЁЯФФ": "ЁЯРЕ (Tiger) + ЁЯФФ (Bell): Represents 'Puli' тАФ 'Puli' means tiger, bell here suggests alertness.",
    "ЁЯХ╖я╕ПЁЯзС": "ЁЯХ╖я╕П (Spider) + ЁЯзС (Man): Refers to 'Spider-Man', the superhero with spider-like powers.",
    # ... your full emoji_meanings here, truncated for brevity
}

# --- Runtime data ---
active_questions: Dict[str, Dict[str, Any]] = {}
ended_games = set()

# --- Pyrogram bot instance ---
bot = Client("emoji_movie_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- Score functions ---
def get_score(user_id: int) -> int:
    if not scores_collection:
        return 0
    user = scores_collection.find_one({"user_id": user_id})
    return user.get("score", 0) if user else 0

def update_score(user_id: int, name: str) -> None:
    if not scores_collection:
        return
    try:
        scores_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"score": 1}, "$set": {"name": name}},
            upsert=True
        )
    except PyMongoError as e:
        logger.error(f"Failed to update score for {user_id}: {e}")

# --- Commands ---

BOT_NAME = "╦╣ЁЯМЩ с┤Ас┤в╩Ьс┤А╔в╔к╩Пс┤А тЬШ с┤Нс┤Пс┤К╔к╦╝"
fancy_bot_name = f"{BOT_NAME}"

@bot.on_message(filters.command("start"))
async def start(_, message):
    start_buttons = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("ЁЯМ╕ Owner", url=OWNER_LINK),
                InlineKeyboardButton("ЁЯУв Updates", url=CHANNEL_LINK)
            ],
            [
                InlineKeyboardButton("ЁЯТЦ Help", callback_data="help_info")
            ]
        ]
    )
    mention_md = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    start_text = (
        f"{fancy_bot_name}\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        f"ЁЯТЧ ро╡рогроХрпНроХроорпН {mention_md} ЁЯМЯЁЯТХ\n"
        "ЁЯОм **Tamil Emoji Movie Game**-роХрпНроХрпБ роЙроЩрпНроХро│рпИ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! ЁЯе│тЬи\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        "ЁЯТб роХрпБро┤рпБро╡ро┐ро▓рпН **/emoji** роОрой роЯрпИрокрпН роЪрпЖропрпНродрпБ ро╡ро┐ро│рпИропро╛роЯ родрпБро╡роЩрпНроХрпБроЩрпНроХро│рпН!\n"
        "ЁЯПЖ роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпИ рокро╛ро░рпНроХрпНроХ: **/myscore**\n"
        "тПн роХрпЗро│рпНро╡ро┐ропрпИ родро╡ро┐ро░рпНроХрпНроХ: **/skip**\n"
        "ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпИ роиро┐ро▒рпБродрпНрод: **/end**\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        "ЁЯТб роХрпАро┤рпЗ роЙро│рпНро│ рокроЯрпНроЯройрпНроХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН тмЗ"
    )
    await message.reply(
        start_text,
        reply_markup=start_buttons,
        parse_mode=ParseMode.MARKDOWN
    )

@bot.on_callback_query(filters.regex(r"^help_info$"))
async def help_info(_, query: CallbackQuery):
    help_text = (
        "тД╣ **ро╡ро┐ро│рпИропро╛роЯрпБроорпН ро╡ро┤ро┐роорпБро▒рпИ:**\n\n"
        "1я╕ПтГг роХрпБро┤рпБро╡ро┐ро▓рпН `/emoji` type роЪрпЖропрпНропро╡рпБроорпН.\n"
        "2я╕ПтГг Bot роТро░рпБ emoji clue & 4 родрпЗро░рпНро╡рпБроХро│рпН родро░рпБроорпН.\n"
        "3я╕ПтГг роЪро░ро┐ропро╛рой рокродро┐ро▓рпИ click роЪрпЖропрпНропро╡рпБроорпН.\n"
        "4я╕ПтГг роорпБродро▓ро┐ро▓рпН роЪро░ро┐ропро╛рой рокродро┐ро▓рпН роЪрпКро▓рпНро╡ро╡ро░рпБроХрпНроХрпБ рокрпБро│рпНро│ро┐роХро│рпН роХро┐роЯрпИроХрпНроХрпБроорпН.\n\n"
        "ЁЯПЖ `/myscore` тАУ роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпН рокро╛ро░рпНроХрпНроХ\n"
        "тПн `/skip` тАУ родро▒рпНрокрпЛродрпИроп роХрпЗро│рпНро╡ро┐ родро╡ро┐ро░рпНроХрпНроХ\n"
        "ЁЯЫС `/end` тАУ ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНрод\n"
        "ЁЯУМ роТро╡рпНро╡рпКро░рпБ роХрпЗро│рпНро╡ро┐роХрпНроХрпБроорпН роТро░рпЗ роорпБропро▒рпНроЪро┐ роороЯрпНроЯрпБроорпЗ."
    )
    await query.answer()
    await query.message.reply(help_text)

@bot.on_message(filters.command("help"))
async def help_command(_, message):
    await message.reply(
        "ЁЯСЛ Welcome to Tamil Emoji Movie Game!\n\n"
        "Use these commands:\n"
        "/emoji - Start a new emoji question\n"
        "/myscore - Show your current score\n"
        "/skip - Skip current question\n"
        "/end - End the game in this group\n"
        "Tap the buttons or use commands as shown."
    )

@bot.on_message(filters.command("myscore"))
async def my_score(_, message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    points = get_score(user_id)
    await message.reply(f"ЁЯПЖ {name}, роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпН: {points}")

@bot.on_message(filters.command("emoji") & filters.chat_type.groups)
async def send_emoji_question(_, message):
    chat_id = message.chat.id
    if chat_id in ended_games:
        await message.reply("ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ. роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХ роорпБроЯро┐ропро╛родрпБ.")
        return

    movie = random.choice(movies)
    correct = movie[1]
    emoji_clue = movie[0]

    # Find wrong choices with same first letter if possible
    same_first_letter_movies = [m[1] for m in movies if m[1] != correct and m[1][0].lower() == correct[0].lower()]
    if len(same_first_letter_movies) < 3:
        wrong_choices = random.sample([m[1] for m in movies if m[1] != correct], 3)
    else:
        wrong_choices = random.sample(same_first_letter_movies, 3)

    options = wrong_choices + [correct]
    random.shuffle(options)
    correct_index = options.index(correct)

    qid = str(random.randint(100000, 999999))
    active_questions[qid] = {
        "options": options,
        "correct_index": correct_index,
        "answered": set(),
        "closed": False,
        "chat_id": chat_id,
        "emoji_clue": emoji_clue,
        "correct_answer": correct
    }

    buttons = [
        [InlineKeyboardButton(opt, callback_data=f"ans|{qid}|{i}")]
        for i, opt in enumerate(options)
    ]

    sent = await message.reply(
        f"ЁЯФН роЗроирпНрод Emoji роОроирпНрод родрооро┐ро┤рпН рокроЯроорпН?\n\n{emoji_clue}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    active_questions[qid]["msg_id"] = sent.message_id

@bot.on_message(filters.command("skip") & filters.chat_type.groups)
async def skip_question(_, message):
    chat_id = message.chat.id
    found = False
    for qid, qdata in list(active_questions.items()):
        if qdata.get("chat_id") == chat_id:
            correct_text = qdata["options"][qdata["correct_index"]]
            emoji_clue = qdata.get("emoji_clue", "")
            explanation = emoji_meanings.get(emoji_clue, "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЗроирпНрод Emoji ро╡ро┐ро│роХрпНроХроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
            await message.reply(
                f"тПн роХрпЗро│рпНро╡ро┐ родро╡ро┐ро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!\n"
                f"роЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_text}\n\n"
                f"ЁЯУЦ ро╡ро┐ро│роХрпНроХроорпН:\n{explanation}"
            )
            active_questions.pop(qid, None)
            found = True
            break
    if not found:
        await message.reply("тПн родро▒рпНрокрпЛродрпБ роОродрпБро╡рпБроорпН роХрпЗро│рпНро╡ро┐ роЗро▓рпНро▓рпИ.")

@bot.on_message(filters.command("end") & filters.chat_type.groups)
async def end_game(_, message):
    chat_id = message.chat.id
    if chat_id in ended_games:
        await message.reply("ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роПро▒рпНроХройро╡рпЗ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.")
        return
    ended_games.add(chat_id)
    # Remove all active questions for this chat
    to_remove = [qid for qid, qdata in active_questions.items() if qdata.get("chat_id") == chat_id]
    for qid in to_remove:
        active_questions.pop(qid, None)
    await message.reply("ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ!")

@bot.on_callback_query(filters.regex(r"^ans\|"))
async def check_answer(_, query: CallbackQuery):
    try:
        _, qid, idx_str = query.data.split("|")
        idx = int(idx_str)
    except Exception as e:
        logger.error(f"Callback parse error: {e}")
        await query.answer("Invalid data.", show_alert=True)
        return

    qdata = active_questions.get(qid)
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    if not qdata:
        await query.answer("роЗроирпНрод роХрпЗро│рпНро╡ро┐ роХро╛ро▓ро╛ро╡родро┐ропро╛роХро┐ро╡ро┐роЯрпНроЯродрпБ.", show_alert=True)
        return

    if qdata.get("closed", False):
        await query.answer("роЗроирпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБ рокродро┐ро▓рпН роЪрпКро▓рпНро▓рокрпНрокроЯрпНроЯрпБро╡ро┐роЯрпНроЯродрпБ.", show_alert=True)
        return

    if user_id in qdata.get("answered", set()):
        await query.answer("роирпАроЩрпНроХро│рпН роПро▒рпНроХройро╡рпЗ рокродро┐ро▓рпН роЪрпКройрпНройрпАро░рпНроХро│рпН.", show_alert=True)
        return

    qdata["answered"].add(user_id)

    if idx == qdata["correct_index"]:
        update_score(user_id, user_name)
        points = get_score(user_id)
        await query.answer(f"тЬЕ роЪро░ро┐! {user_name}роХрпНроХрпБ {points} рокрпБро│рпНро│ро┐роХро│рпН", show_alert=True)
        correct_text = qdata["options"][qdata["correct_index"]]
        explanation = emoji_meanings.get(qdata.get("emoji_clue", ""), "ро╡ро┐ро│роХрпНроХроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
        try:
            await query.message.edit_text(
                f"ЁЯПЖ {user_name} роЪро░ро┐ропро╛роХ роХрогрпНроЯрпБрокро┐роЯро┐родрпНродро╛ро░рпН!\n"
                f"роЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_text}\n\n"
                f"ЁЯУЦ ро╡ро┐ро│роХрпНроХроорпН:\n{explanation}"
            )
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")

        qdata["closed"] = True
        active_questions.pop(qid, None)
    else:
        await query.answer("тЭМ родро╡ро▒рпБ!", show_alert=True)

# Optional admin restart command to clear ended games
@bot.on_message(filters.command("restart") & filters.user(OWNER_LINK.split("tg://user?id=")[-1]))
async def restart_game(_, message):
    ended_games.clear()
    active_questions.clear()
    await message.reply("тЩ╗я╕П ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роорпАрогрпНроЯрпБроорпН родрпБро╡роЩрпНроХро┐ропродрпБ!")

# --- Run bot ---
if __name__ == "__main__":
    logger.info("Bot started...")
    bot.run()
