import random
from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient
from config import API_ID, API_HASH, BOT_TOKEN, MONGO_URI, DB_NAME, COLLECTION_NAME, OWNER_LINK, CHANNEL_LINK

# ==== MONGODB CONNECT ====
mongo_client = MongoClient(MONGO_URI)
db = mongo_client[DB_NAME]
scores_collection = db[COLLECTION_NAME]

# ==== MOVIE DATA ====
movies = [
    ("ЁЯРНЁЯФФ", "Puli"), ("ЁЯХ╖я╕ПЁЯСи", "Spider-Man: No Way Home (Tamil Dub)"), ("ЁЯРпЁЯТк", "Singam"),
    ("ЁЯССЁЯП░", "Ponniyin Selvan"), ("ЁЯЪАЁЯМХ", "Tik Tik Tik"), ("ЁЯМКЁЯРа", "Meen Kuzhambum Mann Paanaiyum"),
    ("ЁЯП╣ЁЯФе", "Baahubali"), ("ЁЯС╗ЁЯПа", "Kanchana"), ("ЁЯЫХЁЯжЕ", "Thirupaachi"), ("ЁЯСйтАНЁЯН│ЁЯН▓", "Saivam"),
    ("ЁЯРЕЁЯОп", "Kumki"), ("ЁЯСитАНтЪХя╕ПЁЯТК", "Mersal"), ("ЁЯТгЁЯХ╡я╕П", "Vivegam"), ("ЁЯОнЁЯОд", "Kaadhalan"),
    ("ЁЯСитАНЁЯЪТЁЯФе", "Theri"), ("ЁЯкВЁЯОп", "Maanaadu"), ("ЁЯЫ╢ЁЯПЭя╕П", "Kaadhalum Kadanthu Pogum"),
    ("ЁЯО╕ЁЯОд", "Rockstar (Tamil Dub)"), ("ЁЯЪФЁЯФл", "Kaakha Kaakha"), ("ЁЯТГЁЯХ║", "Ok Kanmani"),
    ("ЁЯкЦЁЯФл", "Theeran Adhigaaram Ondru"), ("ЁЯж╕тАНтЩВя╕ПтЪб", "Minnal Murali (Tamil Dub)"),
    ("ЁЯРЖЁЯФл", "Kaala"), ("ЁЯПНя╕ПЁЯТи", "Irumbu Thirai"), ("ЁЯОйЁЯОй", "Gentleman"), ("ЁЯХ░я╕ПЁЯФД", "24"),
    ("ЁЯМЛЁЯФе", "Sivaji"), ("ЁЯСйтАНЁЯСжтЭдя╕П", "Pasanga"), ("ЁЯСитАНЁЯМ╛ЁЯМ╛", "Kadaikutty Singam"),
    ("ЁЯСКЁЯй╕", "Asuran"), ("ЁЯОпЁЯОп", "Thuppakki"), ("ЁЯЪЦЁЯЫгя╕П", "Anegan"), ("ЁЯЫ╢ЁЯРЯ", "Paruthiveeran"),
    ("ЁЯзЯтАНтЩВя╕ПЁЯПГ", "Miruthan"), ("ЁЯФкЁЯСй", "Psycho"), ("ЁЯТ╝ЁЯПв", "Mankatha"), ("ЁЯХ╡я╕ПтАНтЩВя╕ПЁЯФН", "Detective"),
    ("ЁЯСйтАНтЭдя╕ПтАНЁЯСиЁЯТФ", "96"), ("ЁЯТГЁЯТФ", "Mayakkam Enna"), ("ЁЯППЁЯПЖ", "Chennai 600028"),
    ("ЁЯРТЁЯОн", "Ko"), ("ЁЯУЪЁЯОУ", "Nanban"), ("ЁЯЪЪЁЯТи", "Vettai"), ("ЁЯкВЁЯМкя╕П", "Soorarai Pottru"),
    ("ЁЯСйтАНЁЯСйтАНЁЯСж", "Thanga Meengal"), ("ЁЯХпя╕ПЁЯММ", "Engeyum Eppodhum"), ("ЁЯОиЁЯСй", "Raja Rani"),
    ("ЁЯЪАЁЯкР", "Indru Netru Naalai"), ("ЁЯРНЁЯй╕", "Naan Avanillai"), ("ЁЯЪдЁЯПЦя╕П", "Billa"),
    ("ЁЯПЮя╕ПЁЯРШ", "Aaranya Kaandam"), ("ЁЯЫХЁЯЩП", "Kovil"), ("ЁЯСоЁЯФл", "Saamy"), ("ЁЯТФЁЯО╝", "Vinnaithaandi Varuvaayaa"),
    ("ЁЯЪВЁЯПЮя╕П", "Pariyerum Perumal"), ("ЁЯОдЁЯОз", "Sarvam Thaala Mayam"), ("ЁЯРОЁЯП╣", "Kaavalan"),
    ("ЁЯСйтАНЁЯПлЁЯУЪ", "Kandukondain Kandukondain"), ("ЁЯНлЁЯНн", "Chocklet"), ("ЁЯй╕ЁЯПЫя╕П", "Raatchasan"),
    ("ЁЯПЦя╕ПЁЯМ┤", "Sura"), ("ЁЯР╖ЁЯОп", "Oru Oorla Rendu Raja"), ("ЁЯОдЁЯО╕", "Petta"), ("ЁЯЫгя╕ПЁЯЪЩ", "Kadhalar Dhinam"),
    ("ЁЯПЫя╕ПтЪЦя╕П", "Jai Bhim"), ("ЁЯПеЁЯй║", "Doctor"), ("ЁЯММЁЯЪА", "Enthiran"), ("ЁЯкЦЁЯЗоЁЯЗ│", "Indian"),
    ("ЁЯзСтАНЁЯЪАЁЯкР", "Manithan"), ("ЁЯОнЁЯХ┤я╕П", "Aalavandhan"), ("ЁЯМКЁЯЪд", "Anniyan"), ("ЁЯТ╝ЁЯза", "Ratsasan"),
    ("ЁЯзЩтАНтЩВя╕ПЁЯФо", "Magadheera (Tamil Dub)"), ("ЁЯЪШЁЯЫгя╕П", "Saivam"), ("ЁЯжБЁЯСС", "The Lion King (Tamil Dub)"),
    ("ЁЯжЬЁЯМ┤", "Kaakha Kaakha 2"), ("ЁЯРжЁЯОд", "Papanasam"), ("ЁЯЪвЁЯМК", "Kadhalan 2"), ("ЁЯРНЁЯТА", "Neelam"),
    ("ЁЯП╣ЁЯЧбя╕П", "Vikram"), ("ЁЯЪУЁЯЪи", "Beast"), ("ЁЯкЖЁЯОп", "Master"), ("ЁЯОдЁЯОз", "Bigil"),
    ("ЁЯСУЁЯТ╝", "Don"), ("ЁЯХ╢я╕ПЁЯФл", "Thunivu"), ("ЁЯМЕЁЯЫХ", "Varisu"), ("ЁЯППЁЯОп", "Kanaa")
]

# ==== RUNTIME QUESTIONS ====
active_questions = {}
ended_games = set()

# ==== BOT INSTANCE ====
bot = Client("emoji_movie_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ==== SCORE FUNCTIONS ====
def get_score(user_id: int) -> int:
    user = scores_collection.find_one({"user_id": user_id})
    return user["score"] if user and "score" in user else 0

def update_score(user_id: int, name: str):
    scores_collection.update_one(
        {"user_id": user_id},
        {"$inc": {"score": 1}, "$set": {"name": name}},
        upsert=True
    )

# ==== COMMAND HANDLERS ====
BOT_NAME = "╦╣ЁЯМЩ с┤Ас┤в╩Ьс┤А╔в╔к╩Пс┤А тЬШ с┤Нс┤Пс┤К╔к╦╝"

fancy_bot_name = f"{BOT_NAME}"

@bot.on_message(filters.command("start"))
async def start(_, message):
    start_buttons = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("ЁЯМ╕ Owner", url=OWNER_LINK),
                InlineKeyboardButton("ЁЯУв Updates", url=CHANNEL_LINK)
            ],
            [
                InlineKeyboardButton("ЁЯТЦ Help", callback_data="help_info")
            ]
        ]
    )
    mention_md = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    start_text = (
        f"{fancy_bot_name}\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        f"ЁЯТЧ ро╡рогроХрпНроХроорпН {mention_md} ЁЯМЯЁЯТХ\n"
        "ЁЯОм **Tamil Emoji Movie Game**-роХрпНроХрпБ роЙроЩрпНроХро│рпИ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! ЁЯе│тЬи\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        "ЁЯТб роХрпБро┤рпБро╡ро┐ро▓рпН **/emoji** роОрой роЯрпИрокрпН роЪрпЖропрпНродрпБ ро╡ро┐ро│рпИропро╛роЯ родрпБро╡роЩрпНроХрпБроЩрпНроХро│рпН!\n"
        "ЁЯПЖ роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпИ рокро╛ро░рпНроХрпНроХ: **/myscore**\n"
        "тПн роХрпЗро│рпНро╡ро┐ропрпИ родро╡ро┐ро░рпНроХрпНроХ: **/skip**\n"
        "ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпИ роиро┐ро▒рпБродрпНрод: **/end**\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n"
        "ЁЯТб роХрпАро┤рпЗ роЙро│рпНро│ рокроЯрпНроЯройрпНроХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН тмЗ"
    )
    await message.reply(
        start_text,
        reply_markup=start_buttons,
        parse_mode=ParseMode.MARKDOWN
    )

@bot.on_callback_query(filters.regex(r"^help_info$"))
async def help_info(_, query):
    help_text = (
        "тД╣ **ро╡ро┐ро│рпИропро╛роЯрпБроорпН ро╡ро┤ро┐роорпБро▒рпИ:**\n\n"
        "1я╕ПтГг роХрпБро┤рпБро╡ро┐ро▓рпН `/emoji` type роЪрпЖропрпНропро╡рпБроорпН.\n"
        "2я╕ПтГг Bot роТро░рпБ emoji clue & 4 родрпЗро░рпНро╡рпБроХро│рпН родро░рпБроорпН.\n"
        "3я╕ПтГг роЪро░ро┐ропро╛рой рокродро┐ро▓рпИ click роЪрпЖропрпНропро╡рпБроорпН.\n"
        "4я╕ПтГг роорпБродро▓ро┐ро▓рпН роЪро░ро┐ропро╛рой рокродро┐ро▓рпН роЪрпКро▓рпНро╡ро╡ро░рпБроХрпНроХрпБ рокрпБро│рпНро│ро┐роХро│рпН роХро┐роЯрпИроХрпНроХрпБроорпН.\n\n"
        "ЁЯПЖ `/myscore` тАУ роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпН рокро╛ро░рпНроХрпНроХ\n"
        "тПн `/skip` тАУ родро▒рпНрокрпЛродрпИроп роХрпЗро│рпНро╡ро┐ родро╡ро┐ро░рпНроХрпНроХ\n"
        "ЁЯЫС `/end` тАУ ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНрод\n"
        "ЁЯУМ роТро╡рпНро╡рпКро░рпБ роХрпЗро│рпНро╡ро┐роХрпНроХрпБроорпН роТро░рпЗ роорпБропро▒рпНроЪро┐ роороЯрпНроЯрпБроорпЗ."
    )
    await query.answer()
    await query.message.reply(help_text)

@bot.on_message(filters.command("myscore"))
async def my_score(_, message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    points = get_score(user_id)
    await message.reply(f"ЁЯПЖ {name}, роЙроЩрпНроХро│рпН рокрпБро│рпНро│ро┐роХро│рпН: {points}")

@bot.on_message(filters.command("emoji") & filters.group)
async def send_emoji_question(_, message):
    chat_id = message.chat.id
    if chat_id in ended_games:
        await message.reply("ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ. роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХ роорпБроЯро┐ропро╛родрпБ.")
        return

    movie = random.choice(movies)
    correct = movie[1]

    # Harder clue: show only one emoji from the emoji clue string
    emoji_str = movie[0]
    emoji_list = emoji_str.split()
    emoji_clue = random.choice(emoji_list) if emoji_list else emoji_str[0]

    # Wrong choices with same first letter if possible
    same_first_letter_movies = [m[1] for m in movies if m[1] != correct and m[1][0].lower() == correct[0].lower()]
    if len(same_first_letter_movies) < 3:
        wrong_choices = random.sample([m[1] for m in movies if m[1] != correct], 3)
    else:
        wrong_choices = random.sample(same_first_letter_movies, 3)

    options = wrong_choices + [correct]
    random.shuffle(options)
    correct_index = options.index(correct)

    qid = str(random.randint(100000, 999999))
    active_questions[qid] = {
        "options": options,
        "correct_index": correct_index,
        "answered": set(),
        "closed": False,
        "chat_id": chat_id,
        "first_attempt_done": set()
    }

    buttons = [
        [InlineKeyboardButton(opt, callback_data=f"ans|{qid}|{i}")]
        for i, opt in enumerate(options)
    ]

    sent = await message.reply(
        f"ЁЯФН роЗроирпНрод Emoji роОроирпНрод родрооро┐ро┤рпН рокроЯроорпН?\n\n{emoji_clue}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    active_questions[qid]["msg_id"] = sent.message_id

@bot.on_message(filters.command("skip") & filters.group)
async def skip_question(_, message):
    chat_id = message.chat.id
    for qid, qdata in list(active_questions.items()):
        if qdata.get("chat_id") == chat_id:
            correct_text = qdata["options"][qdata["correct_index"]]
            await message.reply(f"тПн роХрпЗро│рпНро╡ро┐ родро╡ро┐ро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!\nроЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_text}")
            active_questions.pop(qid, None)
            return
    await message.reply("тПн родро▒рпНрокрпЛродрпБ роОродрпБро╡рпБроорпН роХрпЗро│рпНро╡ро┐ роЗро▓рпНро▓рпИ.")

@bot.on_message(filters.command("end") & filters.group)
async def end_game(_, message):
    chat_id = message.chat.id
    ended_games.add(chat_id)
    for qid, qdata in list(active_questions.items()):
        if qdata.get("chat_id") == chat_id:
            active_questions.pop(qid, None)
    await message.reply("ЁЯЫС ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ!.")

@bot.on_callback_query(filters.regex(r"^ans\|"))
async def check_answer(_, query):
    try:
        _, qid, idx_str = query.data.split("|")
        idx = int(idx_str)
    except Exception:
        await query.answer("Invalid data.", show_alert=True)
        return

    qdata = active_questions.get(qid)
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    if not qdata:
        await query.answer("роЗроирпНрод роХрпЗро│рпНро╡ро┐ роХро╛ро▓ро╛ро╡родро┐ропро╛роХро┐ро╡ро┐роЯрпНроЯродрпБ.", show_alert=True)
        return

    if qdata.get("closed", False):
        await query.answer("роЗроирпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБ рокродро┐ро▓рпН роЪрпКро▓рпНро▓рокрпНрокроЯрпНроЯрпБро╡ро┐роЯрпНроЯродрпБ.", show_alert=True)
        return

    # Only one attempt per user per question
    if user_id in qdata["first_attempt_done"]:
        await query.answer("роирпАроЩрпНроХро│рпН роПро▒рпНроХройро╡рпЗ роТро░рпБ роорпБро▒рпИ роорпБропро▒рпНроЪро┐ роЪрпЖропрпНродрпБро│рпНро│рпАро░рпНроХро│рпН.", show_alert=True)
        return

    qdata["first_attempt_done"].add(user_id)

    if idx == qdata["correct_index"]:
        update_score(user_id, user_name)
        points = get_score(user_id)
        await query.answer(f"тЬЕ роЪро░ро┐! {user_name}роХрпНроХрпБ {points} рокрпБро│рпНро│ро┐роХро│рпН", show_alert=True)
        correct_text = qdata["options"][qdata["correct_index"]]
        await query.message.edit_text(f"ЁЯПЖ {user_name} роЪро░ро┐ропро╛роХ роХрогрпНроЯрпБрокро┐роЯро┐родрпНродро╛ро░рпН!\nроЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_text}")
        qdata["closed"] = True
        active_questions.pop(qid, None)
    else:
        await query.answer("тЭМ родро╡ро▒рпБ!", show_alert=True)

bot.run()
